openapi: 3.0.0
info:
  title: Node.js Starter API
  description: API documentation for Node.js Starter by Genius
  version: 1.2.0
servers:
  - url: http://localhost:5000/api
    description: Local server

paths:
  # --- Auth APIs ---
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterInput"
      responses:
        "201":
          description: User registered successfully

  /auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginInput"
      responses:
        "200":
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  # --- User APIs ---
  /users/me:
    get:
      summary: Get current user profile
      tags: [Users]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  # --- Products APIs ---
  /products:
    get:
      summary: Get all products
      tags: [Products]
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

  /products/{id}:
    get:
      summary: Get product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

  # --- Cart APIs ---
  /cart:
    get:
      summary: Get user cart
      tags: [Cart]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: User cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"

  # --- Orders APIs ---
  /orders:
    get:
      summary: Get user orders
      tags: [Orders]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: List of user orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"

  # --- Articles APIs (new) ---
  /articles:
    get:
      summary: Get all articles
      tags: [Articles]
      responses:
        "200":
          description: List of articles
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Article"

    post:
      summary: Create a new article
      tags: [Articles]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleInput"
      responses:
        "201":
          description: Article created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"

  /articles/{id}:
    get:
      summary: Get article by ID
      tags: [Articles]
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
      responses:
        "200":
          description: Article details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"

    put:
      summary: Update article
      tags: [Articles]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ArticleInput"
      responses:
        "200":
          description: Article updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Article"

    delete:
      summary: Delete article
      tags: [Articles]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Article deleted