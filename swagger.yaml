openapi: 3.0.0
info:
  title: Node.js Starter API
  description: API documentation for Node.js Starter by Genius
  version: 1.1.0
servers:
  - url: http://localhost:5000/api
    description: Local server

paths:
  /auth/register:
    post:
      summary: Register a new user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [name, email, password]
              properties:
                name:
                  type: string
                  example: John Doe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: StrongPass123
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /auth/login:
    post:
      summary: Login user
      tags: [Auth]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: StrongPass123
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"

  /user/me:
    get:
      summary: Get logged-in user profile
      tags: [User]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: User profile
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

    put:
      summary: Update user profile
      tags: [User]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Profile updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"

  /dashboard:
    get:
      summary: Get dashboard data
      tags: [Dashboard]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: Dashboard summary
          content:
            application/json:
              schema:
                type: object
                example:
                  stats:
                    users: 100
                    products: 50
                    revenue: 1200

  /products:
    get:
      summary: Get all products
      tags: [Products]
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"

    post:
      summary: Create a new product
      tags: [Products]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

  /products/{id}:
    get:
      summary: Get a product by ID
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

    put:
      summary: Update a product
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductInput"
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"

    delete:
      summary: Delete a product
      tags: [Products]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Product deleted

  /cart:
    get:
      summary: Get current user's cart
      tags: [Cart]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: User's cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"

    post:
      summary: Add item to cart
      tags: [Cart]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [productId, quantity]
              properties:
                productId:
                  type: string
                  example: prod123
                quantity:
                  type: integer
                  example: 2
      responses:
        "201":
          description: Item added to cart
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"

  /cart/{id}:
    put:
      summary: Update item quantity in cart
      tags: [Cart]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [quantity]
              properties:
                quantity:
                  type: integer
                  example: 3
      responses:
        "200":
          description: Cart updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"

    delete:
      summary: Remove item from cart
      tags: [Cart]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Item removed from cart

  /orders:
    get:
      summary: Get all orders of logged-in user
      tags: [Orders]
      security: [ { bearerAuth: [] } ]
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Order"

    post:
      summary: Place a new order
      tags: [Orders]
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                cartId:
                  type: string
                  example: cart123
                shippingAddress:
                  type: string
                  example: 123 Main Street, New York, NY
      responses:
        "201":
          description: Order created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

  /orders/{id}:
    get:
      summary: Get order details
      tags: [Orders]
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: >
        JWT access token.  
        Expires in **12 hours**.  
        Use `Authorization: Bearer <token>` in protected routes.

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 123abc
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: johndoe@example.com
        createdAt:
          type: string
          format: date-time

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: Login successful
        data:
          type: object
          properties:
            token:
              type: string
              example: jwt.token.here
            user:
              $ref: "#/components/schemas/User"

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: User profile fetched successfully
        data:
          $ref: "#/components/schemas/User"

    Product:
      type: object
      properties:
        id:
          type: string
          example: prod123
        name:
          type: string
          example: iPhone 15
        price:
          type: number
          example: 999.99
        description:
          type: string
          example: Latest iPhone model
        createdAt:
          type: string
          format: date-time

    ProductInput:
      type: object
      required: [name, price]
      properties:
        name:
          type: string
          example: iPhone 15
        price:
          type: number
          example: 999.99
        description:
          type: string
          example: Latest iPhone model

    CartItem:
      type: object
      properties:
        productId:
          type: string
          example: prod123
        name:
          type: string
          example: iPhone 15
        price:
          type: number
          example: 999.99
        quantity:
          type: integer
          example: 2

    Cart:
      type: object
      properties:
        id:
          type: string
          example: cart123
        userId:
          type: string
          example: 123abc
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        total:
          type: number
          example: 1999.98

    Order:
      type: object
      properties:
        id:
          type: string
          example: order123
        userId:
          type: string
          example: 123abc
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
        total:
          type: number
          example: 1999.98
        shippingAddress:
          type: string
          example: 123 Main Street, New York, NY
        status:
          type: string
          example: pending
        createdAt:
          type: string
          format: date-time